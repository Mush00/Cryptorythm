{"ast":null,"code":"/**\n * 🥞 PancakeSwapBot - Executes token purchases on PancakeSwap\n * ⛓️ Relies on Web3.js and external config for multi-DEX routing\n * 🔁 Future Ready: This layout allows easily switching between DEXes\n */import Web3 from'web3';import{dexConfig}from'./dexSwitcherConfig';// 📦 Centralized router/rpc config\n// 🔧 Extract RPC endpoint and router address for PancakeSwap\nconst{rpc,router}=dexConfig.supportedDEXs.pancakeswap;// 🔌 Connect to Binance Smart Chain (BSC)\nconst web3=new Web3(new Web3.providers.HttpProvider(rpc));// 🛒 Core Function: Executes a buy order through PancakeSwap router\nasync function executeBuy(tokenAddress){console.log(\"🔁 Executing PancakeSwap buy logic...\");// 🔄 Logic to swap BNB for token (to be implemented)\n// ➡️ Example for router.swapExactETHForTokens() can go here\nreturn true;// ✅ Placeholder response\n}// 🧪 Test call (can be removed for production)\nexecuteBuy(\"0x...tokenAddress\");","map":{"version":3,"names":["Web3","dexConfig","rpc","router","supportedDEXs","pancakeswap","web3","providers","HttpProvider","executeBuy","tokenAddress","console","log"],"sources":["/workspaces/Cryptorythm/src/pancakeSwapBot.js"],"sourcesContent":["/**\n * 🥞 PancakeSwapBot - Executes token purchases on PancakeSwap\n * ⛓️ Relies on Web3.js and external config for multi-DEX routing\n * 🔁 Future Ready: This layout allows easily switching between DEXes\n */\n\nimport Web3 from 'web3';\nimport { dexConfig } from './dexSwitcherConfig'; // 📦 Centralized router/rpc config\n\n// 🔧 Extract RPC endpoint and router address for PancakeSwap\nconst { rpc, router } = dexConfig.supportedDEXs.pancakeswap;\n\n// 🔌 Connect to Binance Smart Chain (BSC)\nconst web3 = new Web3(new Web3.providers.HttpProvider(rpc));\n\n// 🛒 Core Function: Executes a buy order through PancakeSwap router\nasync function executeBuy(tokenAddress) {\n  console.log(\"🔁 Executing PancakeSwap buy logic...\");\n\n  // 🔄 Logic to swap BNB for token (to be implemented)\n  // ➡️ Example for router.swapExactETHForTokens() can go here\n\n  return true; // ✅ Placeholder response\n}\n\n// 🧪 Test call (can be removed for production)\nexecuteBuy(\"0x...tokenAddress\");\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,GAEA,MAAO,CAAAA,IAAI,KAAM,MAAM,CACvB,OAASC,SAAS,KAAQ,qBAAqB,CAAE;AAEjD;AACA,KAAM,CAAEC,GAAG,CAAEC,MAAO,CAAC,CAAGF,SAAS,CAACG,aAAa,CAACC,WAAW,CAE3D;AACA,KAAM,CAAAC,IAAI,CAAG,GAAI,CAAAN,IAAI,CAAC,GAAI,CAAAA,IAAI,CAACO,SAAS,CAACC,YAAY,CAACN,GAAG,CAAC,CAAC,CAE3D;AACA,cAAe,CAAAO,UAAUA,CAACC,YAAY,CAAE,CACtCC,OAAO,CAACC,GAAG,CAAC,uCAAuC,CAAC,CAEpD;AACA;AAEA,MAAO,KAAI,CAAE;AACf,CAEA;AACAH,UAAU,CAAC,mBAAmB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}