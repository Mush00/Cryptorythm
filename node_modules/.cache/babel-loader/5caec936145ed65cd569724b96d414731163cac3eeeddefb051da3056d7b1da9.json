{"ast":null,"code":"const testPrices=[101,102,100,103,105,98,110];/**\n * Runs a backtest for a given price series and strategy.\n * @param {number[]} prices - Historical prices\n * @param {function} strategy - Strategy function\n * @returns {number} - Total profit from strategy\n */function runBacktest(prices,strategy){let profit=0;let position=null;prices.forEach(price=>{const action=strategy(price,position);if(action==='BUY'){position=price;}else if(action==='SELL'&&position!==null){profit+=price-position;position=null;}});return profit;}/**\n * Strategy 1: Simple Mean Reversion\n * Buys if price is under 100, sells if over 102\n */function simpleMeanReversion(price,lastBuy){if(!lastBuy&&price<100)return'BUY';if(lastBuy&&price>102)return'SELL';return'HOLD';}/**\n * Strategy 2: Momentum Strategy\n * Buys if price is increasing, sells if decreasing\n */function momentumStrategy(price,lastBuy,index,prices){const prevPrice=index>0?prices[index-1]:price;if(!lastBuy&&price>prevPrice)return'BUY';if(lastBuy&&price<prevPrice)return'SELL';return'HOLD';}/**\n * Wrapper for momentum strategy with index access\n */function momentumStrategyWrapper(price,lastBuy,i,prices){return momentumStrategy(price,lastBuy,i,prices);}// Compare strategies\nfunction compareStrategies(prices){const strategies={'Simple Mean Reversion':simpleMeanReversion,'Momentum Strategy':(price,lastBuy)=>{const i=prices.indexOf(price);return momentumStrategyWrapper(price,lastBuy,i,prices);}};const results={};for(const[name,strategyFn]of Object.entries(strategies)){const profit=runBacktest(prices,strategyFn);results[name]=profit;console.log(\"\\uD83D\\uDCC8 Strategy: \".concat(name,\" | Profit: \").concat(profit));}return results;}// Execute comparison\ncompareStrategies(testPrices);","map":{"version":3,"names":["testPrices","runBacktest","prices","strategy","profit","position","forEach","price","action","simpleMeanReversion","lastBuy","momentumStrategy","index","prevPrice","momentumStrategyWrapper","i","compareStrategies","strategies","Momentum Strategy","indexOf","results","name","strategyFn","Object","entries","console","log","concat"],"sources":["/workspaces/Cryptorythm/src/strategyBacktestOptimizer.js"],"sourcesContent":["const testPrices = [101, 102, 100, 103, 105, 98, 110];\n\n/**\n * Runs a backtest for a given price series and strategy.\n * @param {number[]} prices - Historical prices\n * @param {function} strategy - Strategy function\n * @returns {number} - Total profit from strategy\n */\nfunction runBacktest(prices, strategy) {\n  let profit = 0;\n  let position = null;\n\n  prices.forEach(price => {\n    const action = strategy(price, position);\n    if (action === 'BUY') {\n      position = price;\n    } else if (action === 'SELL' && position !== null) {\n      profit += price - position;\n      position = null;\n    }\n  });\n\n  return profit;\n}\n\n/**\n * Strategy 1: Simple Mean Reversion\n * Buys if price is under 100, sells if over 102\n */\nfunction simpleMeanReversion(price, lastBuy) {\n  if (!lastBuy && price < 100) return 'BUY';\n  if (lastBuy && price > 102) return 'SELL';\n  return 'HOLD';\n}\n\n/**\n * Strategy 2: Momentum Strategy\n * Buys if price is increasing, sells if decreasing\n */\nfunction momentumStrategy(price, lastBuy, index, prices) {\n  const prevPrice = index > 0 ? prices[index - 1] : price;\n  if (!lastBuy && price > prevPrice) return 'BUY';\n  if (lastBuy && price < prevPrice) return 'SELL';\n  return 'HOLD';\n}\n\n/**\n * Wrapper for momentum strategy with index access\n */\nfunction momentumStrategyWrapper(price, lastBuy, i, prices) {\n  return momentumStrategy(price, lastBuy, i, prices);\n}\n\n// Compare strategies\nfunction compareStrategies(prices) {\n  const strategies = {\n    'Simple Mean Reversion': simpleMeanReversion,\n    'Momentum Strategy': (price, lastBuy) => {\n      const i = prices.indexOf(price);\n      return momentumStrategyWrapper(price, lastBuy, i, prices);\n    },\n  };\n\n  const results = {};\n\n  for (const [name, strategyFn] of Object.entries(strategies)) {\n    const profit = runBacktest(prices, strategyFn);\n    results[name] = profit;\n    console.log(`ðŸ“ˆ Strategy: ${name} | Profit: ${profit}`);\n  }\n\n  return results;\n}\n\n// Execute comparison\ncompareStrategies(testPrices);\n"],"mappings":"AAAA,KAAM,CAAAA,UAAU,CAAG,CAAC,GAAG,CAAE,GAAG,CAAE,GAAG,CAAE,GAAG,CAAE,GAAG,CAAE,EAAE,CAAE,GAAG,CAAC,CAErD;AACA;AACA;AACA;AACA;AACA,GACA,QAAS,CAAAC,WAAWA,CAACC,MAAM,CAAEC,QAAQ,CAAE,CACrC,GAAI,CAAAC,MAAM,CAAG,CAAC,CACd,GAAI,CAAAC,QAAQ,CAAG,IAAI,CAEnBH,MAAM,CAACI,OAAO,CAACC,KAAK,EAAI,CACtB,KAAM,CAAAC,MAAM,CAAGL,QAAQ,CAACI,KAAK,CAAEF,QAAQ,CAAC,CACxC,GAAIG,MAAM,GAAK,KAAK,CAAE,CACpBH,QAAQ,CAAGE,KAAK,CAClB,CAAC,IAAM,IAAIC,MAAM,GAAK,MAAM,EAAIH,QAAQ,GAAK,IAAI,CAAE,CACjDD,MAAM,EAAIG,KAAK,CAAGF,QAAQ,CAC1BA,QAAQ,CAAG,IAAI,CACjB,CACF,CAAC,CAAC,CAEF,MAAO,CAAAD,MAAM,CACf,CAEA;AACA;AACA;AACA,GACA,QAAS,CAAAK,mBAAmBA,CAACF,KAAK,CAAEG,OAAO,CAAE,CAC3C,GAAI,CAACA,OAAO,EAAIH,KAAK,CAAG,GAAG,CAAE,MAAO,KAAK,CACzC,GAAIG,OAAO,EAAIH,KAAK,CAAG,GAAG,CAAE,MAAO,MAAM,CACzC,MAAO,MAAM,CACf,CAEA;AACA;AACA;AACA,GACA,QAAS,CAAAI,gBAAgBA,CAACJ,KAAK,CAAEG,OAAO,CAAEE,KAAK,CAAEV,MAAM,CAAE,CACvD,KAAM,CAAAW,SAAS,CAAGD,KAAK,CAAG,CAAC,CAAGV,MAAM,CAACU,KAAK,CAAG,CAAC,CAAC,CAAGL,KAAK,CACvD,GAAI,CAACG,OAAO,EAAIH,KAAK,CAAGM,SAAS,CAAE,MAAO,KAAK,CAC/C,GAAIH,OAAO,EAAIH,KAAK,CAAGM,SAAS,CAAE,MAAO,MAAM,CAC/C,MAAO,MAAM,CACf,CAEA;AACA;AACA,GACA,QAAS,CAAAC,uBAAuBA,CAACP,KAAK,CAAEG,OAAO,CAAEK,CAAC,CAAEb,MAAM,CAAE,CAC1D,MAAO,CAAAS,gBAAgB,CAACJ,KAAK,CAAEG,OAAO,CAAEK,CAAC,CAAEb,MAAM,CAAC,CACpD,CAEA;AACA,QAAS,CAAAc,iBAAiBA,CAACd,MAAM,CAAE,CACjC,KAAM,CAAAe,UAAU,CAAG,CACjB,uBAAuB,CAAER,mBAAmB,CAC5C,mBAAmB,CAAES,CAACX,KAAK,CAAEG,OAAO,GAAK,CACvC,KAAM,CAAAK,CAAC,CAAGb,MAAM,CAACiB,OAAO,CAACZ,KAAK,CAAC,CAC/B,MAAO,CAAAO,uBAAuB,CAACP,KAAK,CAAEG,OAAO,CAAEK,CAAC,CAAEb,MAAM,CAAC,CAC3D,CACF,CAAC,CAED,KAAM,CAAAkB,OAAO,CAAG,CAAC,CAAC,CAElB,IAAK,KAAM,CAACC,IAAI,CAAEC,UAAU,CAAC,EAAI,CAAAC,MAAM,CAACC,OAAO,CAACP,UAAU,CAAC,CAAE,CAC3D,KAAM,CAAAb,MAAM,CAAGH,WAAW,CAACC,MAAM,CAAEoB,UAAU,CAAC,CAC9CF,OAAO,CAACC,IAAI,CAAC,CAAGjB,MAAM,CACtBqB,OAAO,CAACC,GAAG,2BAAAC,MAAA,CAAiBN,IAAI,gBAAAM,MAAA,CAAcvB,MAAM,CAAE,CAAC,CACzD,CAEA,MAAO,CAAAgB,OAAO,CAChB,CAEA;AACAJ,iBAAiB,CAAChB,UAAU,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}